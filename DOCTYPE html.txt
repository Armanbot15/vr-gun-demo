<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<title>VR Gun with Magazine & Cocking Demo</title>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<style>
  body { margin: 0; overflow: hidden; }
  canvas { display: block; }
</style>
</head>
<body>
<script src="https://cdn.jsdelivr.net/npm/three@0.152.2/build/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.152.2/examples/jsm/webxr/VRButton.js"></script>

<script>
  let scene, camera, renderer;
  let controllerRight, controllerLeft;
  let gun, magazine, cockingHandle;
  let bullets = [];
  const bulletSpeed = 0.05;

  // Grab state
  let grabbedObject = null;
  let grabbedController = null;

  // Magazine state
  let magInserted = false;

  // Cocking state
  let isCocked = false;

  init();
  animate();

  function init() {
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x222222);

    camera = new THREE.PerspectiveCamera(70, window.innerWidth/window.innerHeight, 0.1, 100);
    camera.position.set(0, 1.6, 3);

    // Floor
    const floorGeometry = new THREE.PlaneGeometry(10, 10);
    const floorMaterial = new THREE.MeshStandardMaterial({ color: 0x555555 });
    const floor = new THREE.Mesh(floorGeometry, floorMaterial);
    floor.rotation.x = -Math.PI / 2;
    floor.receiveShadow = true;
    scene.add(floor);

    // Lights
    const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444);
    hemiLight.position.set(0, 20, 0);
    scene.add(hemiLight);

    const dirLight = new THREE.DirectionalLight(0xffffff);
    dirLight.position.set(3, 10, 10);
    scene.add(dirLight);

    // Renderer
    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.xr.enabled = true;
    document.body.appendChild(renderer.domElement);

    document.body.appendChild(VRButton.createButton(renderer));

    // Controllers
    controllerRight = renderer.xr.getController(0);
    scene.add(controllerRight);
    controllerRight.addEventListener('selectstart', onSelectStart);
    controllerRight.addEventListener('squeezestart', onGrabStart);
    controllerRight.addEventListener('squeezeend', onGrabEnd);

    controllerLeft = renderer.xr.getController(1);
    scene.add(controllerLeft);
    controllerLeft.addEventListener('squeezestart', onGrabStart);
    controllerLeft.addEventListener('squeezeend', onGrabEnd);

    // Gun group on right controller
    gun = new THREE.Group();
    controllerRight.add(gun);

    // Gun body (blue cube)
    const gunBodyGeo = new THREE.BoxGeometry(0.15, 0.06, 0.35);
    const gunBodyMat = new THREE.MeshStandardMaterial({ color: 0x3333ff });
    const gunBody = new THREE.Mesh(gunBodyGeo, gunBodyMat);
    gunBody.position.set(0, 0, -0.15);
    gun.add(gunBody);

    // Cocking handle (gray small cube on top-back)
    const cockingGeo = new THREE.BoxGeometry(0.05, 0.02, 0.08);
    const cockingMat = new THREE.MeshStandardMaterial({ color: 0x999999 });
    cockingHandle = new THREE.Mesh(cockingGeo, cockingMat);
    cockingHandle.position.set(0, 0.03, -0.3);
    gun.add(cockingHandle);

    // Magazine (black rectangle floating in space at start)
    const magGeo = new THREE.BoxGeometry(0.06, 0.15, 0.02);
    const magMat = new THREE.MeshStandardMaterial({ color: 0x222222 });
    magazine = new THREE.Mesh(magGeo, magMat);
    magazine.position.set(0.3, 1.4, -0.5);
    scene.add(magazine);

    window.addEventListener('resize', onWindowResize);
  }

  function onWindowResize() {
    camera.aspect = window.innerWidth/window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  }

  function onSelectStart() {
    if (!magInserted) {
      console.log("Insert magazine first!");
      return;
    }
    if (!isCocked) {
      console.log("Cock the gun first!");
      return;
    }
    shootBullet();
    isCocked = false; // need to cock again for next shot
  }

  function shootBullet() {
    const bulletGeo = new THREE.SphereGeometry(0.02, 8, 8);
    const bulletMat = new THREE.MeshStandardMaterial({ color: 0xff3333 });
    const bullet = new THREE.Mesh(bulletGeo, bulletMat);

    gun.getWorldPosition(bullet.position);
    const forward = new THREE.Vector3(0, 0, -1);
    forward.applyQuaternion(gun.getWorldQuaternion(new THREE.Quaternion()));
    bullet.userData.velocity = forward.multiplyScalar(bulletSpeed);

    scene.add(bullet);
    bullets.push(bullet);
  }

  // Grab logic: start grabbing if close to mag or cocking handle
  function onGrabStart(event) {
    const controller = event.target;
    const controllerPos = new THREE.Vector3();
    controller.getWorldPosition(controllerPos);

    if (!magInserted) {
      const magPos = new THREE.Vector3();
      magazine.getWorldPosition(magPos);
      if (controllerPos.distanceTo(magPos) < 0.1) {
        grabbedObject = magazine;
        grabbedController = controller;
        return;
      }
    }

    const cockingPos = new THREE.Vector3();
    cockingHandle.getWorldPosition(cockingPos);
    if (controllerPos.distanceTo(cockingPos) < 0.1) {
      grabbedObject = cockingHandle;
      grabbedController = controller;
      return;
    }
  }

  function onGrabEnd(event) {
    if (!grabbedObject) return;

    if (grabbedObject === magazine) {
      // Check if near mag slot on gun (approximate local position)
      const magSlotWorldPos = new THREE.Vector3();
      gun.localToWorld(magSlotWorldPos.set(0, -0.03, -0.05));
      const magPos = new THREE.Vector3();
      magazine.getWorldPosition(magPos);

      if (magPos.distanceTo(magSlotWorldPos) < 0.05) {
        // Snap mag into gun
        gun.add(magazine);
        magazine.position.set(0, -0.03, -0.05);
        magInserted = true;
        console.log("Magazine inserted!");
      }
    }

    if (grabbedObject === cockingHandle) {
      // If pulled back enough, cock gun
      if (cockingHandle.position.z < -0.05) {
        isCocked = true;
        console.log("Gun cocked!");
      }
      // Reset cocking handle position
      cockingHandle.position.z = 0;
    }

    grabbedObject = null;
    grabbedController = null;
  }

  function animate() {
    renderer.setAnimationLoop(render);
  }

  function render() {
    // If grabbing magazine, follow controller
    if (grabbedObject === magazine && grabbedController) {
      const pos = new THREE.Vector3();
      const quat = new THREE.Quaternion();
      grabbedController.matrixWorld.decompose(pos, quat, new THREE.Vector3());
      magazine.position.copy(pos);
      magazine.quaternion.copy(quat);
    }

    // If grabbing cocking handle, follow controller but clamp pull distance
    if (grabbedObject === cockingHandle && grabbedController) {
      const pos = new THREE.Vector3();
      const quat = new THREE.Quaternion();
      grabbedController.matrixWorld.decompose(pos, quat, new THREE.Vector3());
      gun.worldToLocal(pos);
      cockingHandle.position.z = THREE.MathUtils.clamp(pos.z, -0.1, 0);
    }

    // Move bullets forward and remove if far away
    for (let i = bullets.length - 1; i >= 0; i--) {
      const b = bullets[i];
      b.position.add(b.userData.velocity);
      if (b.position.length() > 20) {
        scene.remove(b);
        bullets.splice(i, 1);
      }
    }

    renderer.render(scene, camera);
  }
</script>
</body>
</html>
